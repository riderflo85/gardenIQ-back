import os
import subprocess
import sys
from argparse import ArgumentParser
from datetime import datetime
from typing import Literal, List

from django.core.management.color import color_style
from serial.tools import list_ports


DOCKER_USB_PORT = "/dev/ttyUSBCard1"
OVERRIDE_FILE = "docker-compose-usb-override.yml"
SEARCH_TYPE = ["manufacturer", "hwid"]

template = """
# This file is generated by python script `start_usb_docker.py`
# generated at : {gen_at}

services:
  web-dev:
    # `devices` setting is automatically generated by the python script !
    # Because the usb mounted path can change.
    devices:
      - {host_card_path}:{docker_card_path}
"""

style = color_style(force_color=False)

parser = ArgumentParser()
parser.add_argument(
    "-t",
    dest="filter_by",
    choices=SEARCH_TYPE,
    default=SEARCH_TYPE[0],
    help="The filter search device by type ('manufacturer' or 'hwid')."
)
parser.add_argument(
    "-v",
    dest="value_filter",
    default="MicroPython",
    help="The value of filter search device. This info can get with 'python manage.py list_devices --verbose' django command."
)


def find_usb_device(filter_by: Literal["hwid", "manufacturer"], filter_value: str) -> List:
    """Search usb device port with hwid or manufacturer info.

    Args:
        filter_by (Literal['hwid', 'manufacturer']): filter devices liste with info.
        filter_value (str): filter value used with `filter_by`.

    Returns:
        List: list with True if device found else False and device port path.
            example: [True, '/dev/ttyS1']
    """
    devices = list_ports.comports()
    found = False
    device_port = ""

    match filter_by:
        case "hwid":
            for device in devices:
                if filter_value in device.hwid:
                    found = True
                    device_port = device.device
                    break
        case "manufacturer":
            for device in devices:
                if device.manufacturer and filter_value in device.manufacturer:
                    found = True
                    device_port = device.device
                    break
        case _:
            return [False, ""]

    return [found, device_port]

def generate_override(card_path: str, override_file: str=OVERRIDE_FILE) -> None:
    """Generate override docker-compose file to add `devices` directive.

    Args:
        card_path (str): device path (path is port).
        override_file (str, optional): override file path name. Defaults to OVERRIDE_FILE.
    """
    now_obj = datetime.now()
    # format datetime object to readable string.
    # %d/%m/%Y %H:%M:%S return example "01/01/2025 09:20:00"
    formated_datetime = now_obj.strftime("%d/%m/%Y %H:%M:%S")

    content = template.format(
        gen_at=formated_datetime,
        host_card_path=card_path,
        docker_card_path=DOCKER_USB_PORT,
    )
    with open(override_file, "w") as f:
        f.write(content)
    print("üìù" +
        style.SUCCESS(f" File `{override_file}` generated with device port `{card_path}`.")
    )

def launch_docker_compose():
    """Launch the docker compose with merged configuration files."""
    print("üöÄ" +
        style.HTTP_INFO(" Launch docker compose...")
    )
    subprocess.run(["docker", "compose", "-f", "docker-compose.yml", "-f", OVERRIDE_FILE, "up", "web-dev"])

def main(filter_type, filter_value):
    usb_card, usb_port = find_usb_device(filter_type, filter_value)

    if usb_card:
        print("‚úÖ" +
            style.SUCCESS(f" usb card successfully detected !\n\tHost port is `{usb_port}`\n\tMounted on docker to `{DOCKER_USB_PORT}`\n")
        )
    else:
        print("‚ùå" +
            style.ERROR(" usb card not detected :(")
        )
        sys.exit(1)

    if not os.access(usb_port, os.R_OK | os.W_OK):
        print("‚ö†Ô∏è" +
            style.WARNING(f"‚ö†Ô∏è Usb card `{usb_port}` exist but does not access: Permision denied.")
        )
        print(style.WARNING("   Add your user to `dialout` group and restart session :"))
        print(style.WARNING("   sudo usermod -aG dialout $USER"))
        sys.exit(2)

    generate_override(usb_port)
    launch_docker_compose()

if __name__ == "__main__":
    args = parser.parse_args()
    main(args.filter_by, args.filter_value)
